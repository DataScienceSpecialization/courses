tstat0[j] = log2(mean(x[grp==1])/mean(x[grp==0]))
}
pval[i] = mean(abs(tstat0) > abs(tstat))
cat(i)
}
hist(pval)
pval
x = c(c(19,rnorm(19)),rep(0.01,20))
tstat = log2(mean(x[grp==1])/mean(x[grp==0]))
tstat
grp0 = sample(grp)
log2(mean(x[grp==1])/mean(x[grp==0]))
grp = rep(c(1,0),each=20)
pval = rep(NA,100)
tstat0 = rep(NA,1000)
for(i in 1:100){
x = c(c(19,rnorm(19)),rep(0.01,20))
tstat = log2(mean(x[grp==1])/mean(x[grp==0]))
for(j in 1:1000){
grp0 = sample(grp)
tstat0[j] = log2(mean(x[grp0==1])/mean(x[grp0==0]))
}
pval[i] = mean(abs(tstat0) > abs(tstat))
cat(i)
}
warnings()
pval
tstat0
x = c(c(19,rf(19,1,10)),rep(0.01,20))
hist9x
hist(x)
grp = rep(c(1,0),each=20)
pval = rep(NA,100)
tstat0 = rep(NA,1000)
for(i in 1:100){
x = c(c(19,rf(19,1,10)),rep(0.01,20))
tstat = log2(mean(x[grp==1])/mean(x[grp==0]))
for(j in 1:1000){
grp0 = sample(grp)
tstat0[j] = log2(mean(x[grp0==1])/mean(x[grp0==0]))
}
pval[i] = mean(abs(tstat0) > abs(tstat))
cat(i)
}
hist(pval)
pval
tstat
tstat0
grp = rep(c(1,0),each=20)
pval = rep(NA,100)
tstat0 = rep(NA,1000)
for(i in 1:100){
x = c(c(rf(20,1,10)),rep(0.01,20))
tstat = log2(mean(x[grp==1])/mean(x[grp==0]))
for(j in 1:1000){
grp0 = sample(grp)
tstat0[j] = log2(mean(x[grp0==1])/mean(x[grp0==0]))
}
pval[i] = mean(abs(tstat0) > abs(tstat))
cat(i)
}
hist(pval)
pval
y = sample(rbinom(20,size=1,prob=0.5))
x = y + grp + rf(20,1,20)
hist(x)
plot(x,y)
l
y = sample(rbinom(40,size=1,prob=0.5))
x = y + grp + rf(40,1,20)
plot(x,y)
plot(,xgpr)
grp = rep(c(1,0),each=20)
pval = rep(NA,100)
tstat0 = rep(NA,1000)
for(i in 1:100){
y = sample(rbinom(40,size=1,prob=0.5))
x = y + grp + rf(40,1,20)
tstat = log2(mean(x[grp==1])/mean(x[grp==0]))
for(j in 1:1000){
grp0 = sample(grp)
tstat0[j] = log2(mean(x[grp0==1])/mean(x[grp0==0]))
}
pval[i] = mean(abs(tstat0) > abs(tstat))
cat(i)
}
hist(pval)
grp = rep(c(1,0),each=20)
pval = rep(NA,100)
tstat0 = rep(NA,1000)
for(i in 1:100){
y = sample(rbinom(40,size=1,prob=0.5))
x = 10*y + grp + rf(40,1,20)
tstat = log2(mean(x[grp==1])/mean(x[grp==0]))
for(j in 1:1000){
grp0 = sample(grp)
tstat0[j] = log2(mean(x[grp0==1])/mean(x[grp0==0]))
}
pval[i] = mean(abs(tstat0) > abs(tstat))
cat(i)
}
hist(pval)
grp = rep(c(1,0),each=20)
pval = rep(NA,100)
tstat0 = rep(NA,1000)
for(i in 1:100){
y = sample(rbinom(40,size=1,prob=0.5))
x = 20*y + grp + rf(40,1,20)
tstat = log2(mean(x[grp==1])/mean(x[grp==0]))
for(j in 1:1000){
grp0 = sample(grp)
tstat0[j] = log2(mean(x[grp0==1])/mean(x[grp0==0]))
}
pval[i] = mean(abs(tstat0) > abs(tstat))
cat(i)
}
hist(pval)
grp = rep(c(1,0),each=20)
pval = rep(NA,100)
tstat0 = rep(NA,1000)
for(i in 1:100){
y = sample(rbinom(40,size=1,prob=0.1))
x = 20*y + grp + rf(40,1,20)
tstat = log2(mean(x[grp==1])/mean(x[grp==0]))
for(j in 1:1000){
grp0 = sample(grp)
tstat0[j] = log2(mean(x[grp0==1])/mean(x[grp0==0]))
}
pval[i] = mean(abs(tstat0) > abs(tstat))
cat(i)
}
hist(pval)
y
plot(x)
grp = rep(c(1,0),each=20)
pval = rep(NA,100)
tstat0 = rep(NA,1000)
for(i in 1:100){
y = sample(rbinom(40,size=1,prob=0.1))
x = 20*y + 3*grp + rf(40,1,20)
tstat = log2(mean(x[grp==1])/mean(x[grp==0]))
for(j in 1:1000){
grp0 = sample(grp)
tstat0[j] = log2(mean(x[grp0==1])/mean(x[grp0==0]))
}
pval[i] = mean(abs(tstat0) > abs(tstat))
cat(i)
}
hist(pval)
grp = rep(c(1,0),each=20)
pval = rep(NA,100)
tstat0 = rep(NA,1000)
for(i in 1:100){
y = sample(rbinom(40,size=1,prob=0.1))
x = 20*y + 0*grp + rf(40,1,20)
tstat = log2(mean(x[grp==1])/mean(x[grp==0]))
for(j in 1:1000){
grp0 = sample(grp)
tstat0[j] = log2(mean(x[grp0==1])/mean(x[grp0==0]))
}
pval[i] = mean(abs(tstat0) > abs(tstat))
cat(i)
}
hist(pval)
pr
mu = c(rep(0,200),rep(1,50),rep(0,200),rep(1,50),rep(0,200),rep(1,50),rep(0,250))
x = rnorm(1000,mean=3*mu)
pr = 1-locfdr(x)$fdr
plot(exp(filter(log(pr),rep(1/5,5))))
library(locfdr)
mu = c(rep(0,200),rep(1,50),rep(0,200),rep(1,50),rep(0,200),rep(1,50),rep(0,250))
x = rnorm(1000,mean=3*mu)
pr = 1-locfdr(x)$fdr
plot(exp(filter(log(pr),rep(1/5,5))))
mu = c(rep(0,200),rep(1,50),rep(0,200),rep(1,50),rep(0,200),rep(1,50),rep(0,250))
x = rnorm(1000,mean=3*mu)
pr = 1-locfdr(x)$fdr
plot(exp(filter(log(pr),rep(1/5,5))) > 0.8)
dat = read.csv("~/Downloads/getdata-data-ss06hid.csv")
dat[1,]
table(dat$VAL)
sum(colnames(dat)=="ptp15")
sum(colnames(dat)=="pwgtp15")
dat2 = read.csv("~/Downloads/getdata-data-ss06pid.csv")
sum(colnames(dat2)=="pwgtp15")
sum(colnames(dat)=="VAL")
library(rhdf5)
?rhdf5
h5ls("~/Downloads/h5ex_d_extern.h5")
library(rgdal)
library(rdgal)
library(hdf5)
?rhdf5
tmp = h5read("~/Downloads/h5ex_d_extern.h5")
hdf5load
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
tmp = h5read("~/Downloads/h5ex_d_extern.h5")
tmp = h5read(file="~/Downloads/h5ex_d_extern.h5")
?h5read
fname <- "20120103133752-NODC-L3C_GHRSST-SSTskin-AVHRR_Pathfinder-PFV5.2_NOAA19_G_2012003_day-v02.0-fv01.0.nc"
tmp <- h5ls(fname)
fname <- "~/Downloads/test.nc
"
setwd("~/Dropbox/Jeff/teaching/coursera/courses/03_GettingData/03_03_creatingNewVariables/")
library(makeslides)
sf()
bu()
sf()
fileUrl1 = "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
download.file(fileUrl1,destfile="./data/reviews.csv",method="curl")
tmp = readLines("http://biostat.jhsph.edu/~jleek/contact.html")
tmp[1]
nc =sapply(tmp,nchar)
nc[1]
nc[2]
nc[c(10,20,30,100)]
sf()
setwd("../03_03_creatingNewVariables/")
sf()
dat = read.csv("~/Downloads/getdata-data-ss06hid.csv")
grep(colnames(dat),"AGE")
grep("AGE",colnames(dat))
dat2 = read.csv("~/Downloads/getdata-data-ss06pid.csv")
dat = read.csv("~/Downloads/getdata-data-ss06hid.csv")
sum(colnames(dat)=="wgtp")
sum(colnames(dat2)=="wgtp")
grep("wgtp",colnames(dat))
grep("wgtp",colnames(dat))[1]
colnames(dat)[109]
grep("wgtp",colnames(dat2))[1]
grep("wgtp",colnames(dat2))
grep("wgtp",colnames(dat))
grep("wgtp",colnames(dat))[1]
grep("wgtp",colnames(dat))
grep("wgtp",colnames(dat2))
length(grep("wgtp",colnames(dat2)))
length(grep("wgtp",colnames(dat)))
tmp = strsplit(colnames(dat)[grep("wgtp",colnames(dat))])
tmp = strsplit("wgtp",colnames(dat))
tmp[123]
tmp[[1]]
tmp[[123]]
dim(tmp)
length(tmp)
tmp = strsplit("wgtp",names(dat))
tmp
tmp = strsplit(names(dat),"wgtp")
length(tmp)
tmp[123]
tmp = strsplit(names(dat2),"wgtp")
length(tmp)
tmp[123]
dat2 = read.csv("~/Downloads/getdata-data-ss06pid.csv")
library(data.table)
DT = fread(file="~/Downloads/getdata-data-ss06pid.csv")
?fread
DT = fread("~/Downloads/getdata-data-ss06pid.csv")
"~/Downloads/getdata-data-ss06pid.csv"
DT[,mean(pwgtp15),by=SEX]
DT = fread("~/Downloads/getdata-data-ss06hid.csv")
DT[,mean(pwgtp15),by=SEX]
names(DT)
names(DT)=="AGEP"
table(names(DT)=="AGEP")
DT = fread("~/Downloads/getdata-data-ss06pid.csv")
table(names(DT)=="AGEP")
table(names(DT)=="pwgtp1")
?readh5
library(rhdf5)
?hdf5
h5ls("~/Downloads/ex_d_extern.h5")
DT = fread("~/Downloads/getdata-data-ss06pid.csv")
sum(colnames(DT)=="AGS")
DT = fread("~/Downloads/getdata-data-ss06hid.csv")
sum(colnames(DT)=="AGS")
sum(colnames(DT)=="ACR")
DT = fread("~/Downloads/getdata-data-ss06hid.csv")
sum(colnames(DT)=="ACR")
dat = read.csv("~/Downloads/getdata-data-GDP.csv")
dat[1,]
dat[2,]
dat[3,]
dat = read.csv("~/Downloads/getdata-data-GDP.csv",skip=5)
dat[1,]
dat = read.csv("~/Downloads/getdata-data-GDP.csv",skip=4)
dat[1,]
?gsub
gsub(",","",dat[1,4])
gsub(",","",dat[1,5])
as.numeric(gsub(",","",dat[1,5]))
as.numeric(gsub(",","",dat[,5]))
mean(as.numeric(gsub(",","",dat[,5])),na.rm=T)
mean(as.numeric(gsub(" ","",gsub(",","",dat[,5]))),na.rm=T)
gsub(",","",dat[,5])
dat
gsub(",","",dat[1:215,5])
gsub(",","",dat[1:215,5])
mean(gsub(",","",dat[1:215,5]))
mean(as.numeric(gsub(",","",dat[1:215,5])))
mean(as.numeric(gsub(",","",dat[1:215,5])),na.rm=T)
dat = dat[1:215,]
dat[1,]
as.numeric(gsub(",","",dat[1:215,5])),na.rm=T
setwd("../01_07_readingXML/")
sf()
sf()
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
sf()
sf()
bu()
dat = read.csv("~/Downloads/getdata-data-GDP.csv",skip=4)
dat[1,]
dat[195,]
dat[198,]
dat[215,]
dat[216,]
dat[217,]
dat[1:215,]
dat2 = dat[1:215,]
dat2$gdp = as.numeric(gsub(",","",dat[,5]))
dat2$gdp = as.numeric(gsub(",","",dat2[,5]))
dat2[1,]
dat2 = dat2[order(dat2$gdp),]
dat2[1,]
dat2 = dat2[order(-dat2$gdp),]
dat2[1,]
dat2[1:39,]
dat2
eddat = read.csv("~/Downloads/getdata-data-EDSTATS_Country.csv")
eddat[1,]
?merge
names(dat2)
dat2[1,]
merge(dat2,eddat,by.x="X",by.y="CountryCode")
mm = merge(dat2,eddat,by.x="X",by.y="CountryCode")
mm[1,]
table(mm$Incomegroup)
table(mm$IncomeGroup)
table(mm$Income.Group)
dim(mm)
mm[1,]
mm = merge(dat2,eddat,by.x="X",by.y="CountryCode")
mm[1,]
mm[2,]
mm[3,]
dim(mm)
dim(dat2)
dim(eddat)
dat[190,]
dat[191,]
dat[192,]
dat2 = dat[1:190,]
dat2$gdp = as.numeric(gsub(",","",dat2[,5]))
mm = merge(dat2,eddat,by.x="X",by.y="CountryCode")
dim(mm)
dat2[1,]
gg = cut(dat2$X.1)
gg = cut2(dat2$X.1,g=5)
library(HMisc)
library(Hmisc)
gg = cut2(as.numeric(dat2$X.1),g=5)
gg[1]
gg = cut2(as.numeric(mm$X.1),g=5)
mean(as.numeric(mm$X.1)[mm$IncomeGroup=="How many characters are in the 10th, 20th, 30th and 100th lines of HTML from this page:
"])
mean(as.numeric(mm$X.1)[mm$IncomeGroup=="High income: OECD"])
mean(as.numeric(mm$X.1)[mm$IncomeGroup=="High income: OECD"],na.rm=T)
as.numeric(mm$X.1)
mean(as.numeric(mm$X.1)[mm$Income.Group=="High income: OECD"],na.rm=T)
dim(mm)
mean(as.numeric(mm$X.1)[mm$Income.Group=="High income: OECD"])
plot(mm$X.1)
mm$X.1
hh
gg
table(gg)
?cut2
gg
min(as.numeric(mm$X.1),g=5)
as.numeric(mm$X.1))
as.numeric(mm$X.1)
gdpdat = read.csv("~/Downloads/getdata-data-EDSTATS_Country.csv")
gdpdat[1,]
dim(gdpdat)
gdpdat[1:190,]
sdat = gdpdat[1:190,]
sdat[1,]
names(sdat)
edpdat = read.csv("~/Downloads/getdata-data-EDSTATS_Country.csv")
eddat = read.csv("~/Downloads/getdata-data-EDSTATS_Country.csv")
gdpdat = read.csv("~/Downloads/getdata-data-GDP.csv")
gdpdat = gdpdat[1:190,]
mm = merge(gdpdat,eddat,by.x="X",by.y="CountryCode")
mm[1,]
dim(mm)
names(gdpdat)
gdpdat$X
gdpdat = read.csv("~/Downloads/getdata-data-GDP.csv")
gdpdat
names(gdpdat)
gdpdat[1,]
gdpdat[2,]
gdpdat = read.csv("~/Downloads/getdata-data-GDP.csv",skip=4)
gdpdat[1,]
tmp = as.numeric(gdpdat[,2])
sum(!is.na(tmp))
tmp[1]
tmp = as.numeric(as.character(gdpdat[,2]))
tmp[1]
sum(!is.na(tmp))
gdpdat = gdpdat[!is.na(tmp),]
dim(gdpdat)
eddat = read.csv("~/Downloads/getdata-data-EDSTATS_Country.csv")
mm = merge(gdpdat,eddat,by.x="X",by.y="CountryCode")
dim(mm)
mm$rank = as.numeric(as.character(mm$X.1))
mm$rank
min(mm$rank)
names(mmm)
names(mm)
gdpdat[1,]
mm$gdp = as.numeric(gsub(",","",mm$X.4))
mm$gdp[1]
which(mm$X=="USA")
mm[178,]
mean(mm$rank[mm$Income.Group ==""High income: OECD""])
mean(mm$rank[mm$Income.Group =="High income: OECD"])
mm$rankquant= cut2(mm$rank,g=5)
mm$rankquant
table(mm$rankquant)
?cut2
table(mm$rankquant,mm$Income.Group)
library(lubridate)
?lubridate
library(quantmod)
getSymbols("GOOG")
getSymbols("AMZN")
AMZN = as.data.frame(AMZN)
GOOG
rownames(GOOG)
names(GOOG)
?getSymbols
class(GOOG)
class(GOOG.open)
class(GOOG.Open)
class(GOOG$GOOG.Open)
names(GOOG$GOOG.Open)
str(GOOG$GOOG.Open)
str(GOOG$GOOG.Open$update)
str(GOOG$GOOG.Open$updated)
GOOG$GOOG.Open$updated
?xts
index(GOOg)
index(GOOG)
dim(GOOG)
library(quantmod)
getSymbols("GOOG")
getSymbols("AMZN")
GOOG
?getSymbols
goog = getSymbols("GOOG",auto.assign=FALSE)
goog
goog = getSymbols("GOOG",auto.assign=FALSE,from="2010-01-01")
goog
amzn = getSymbols("AMZ",auto.assign=FALSE,from="2014-04-04")
amzn = getSymbols("AMZN",auto.assign=FALSE)
amzn
dim(amzn)
index(amzn)
days =index(amzn)
class(days)
?lubridate
day(days)
mday(days)
year(days)
table(yday(days))
table(year(days))
table(wday(days))
wday(days)
table(year(days))
table(year(days)=="2012")
table(wday(days)[year(days)=="2012"])
h5read
h5read("~/Downloads/h5ex_d_checksum.h5")
h5ls("~/Downloads/h5ex_d_checksum.h5")
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
names(jsonData)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
?
?
?fromJSON
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
jsonData <- fromJSON(readLines("https://api.github.com/users/jtleek/repos"))
jsonData <- fromJSON(readLines("http://api.github.com/users/jtleek/repos"))
jsonData <- fromJSON("http://api.github.com/users/jtleek/repos")
jsonData <- fromJSON(readLines("http://api.github.com/users/jtleek/repos"))
?readLines
tmp = readLines("http://api.github.com/users/jtleek/repos")
tmp = readLines("https://api.github.com/users/jtleek/repos")
jsonData <- fromJSON("http://api.github.com/users/jtleek/repos")
jsonData <- fromJSON("http://api.github.com/users/jtleek/")
jsonData <- fromJSON("https://api.github.com/users/jtleek")
