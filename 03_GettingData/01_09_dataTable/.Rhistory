for(i in 1:length(pi0)){
for(j in 1:length(lambda)){
for(k in 1:nrep){
Nnull <- floor(pi0[i]*N)
Nalt <- N - Nnull
pNull <- 1-pchisq(rchisq(Nnull,df=10),df=10)
pAlt <- 1-pchisq(rchisq(Nalt,df=10,ncp=lambda[j]),df=10)
pVals <- c(pAlt,pNull)
pi0Mat[i,j,k] <- CBUM(pVals)[1]
}
print(c(i,j))
}
}
est <- apply(pi0Mat,c(1,2),mean)
plot(est[,1],pi0)
abline(c(0,1))
est <- apply(pi0Mat,c(1,2),mean)
plot(est[,2],pi0)
abline(c(0,1))
est <- apply(pi0Mat,c(1,2),mean)
plot(est[,3],pi0)
abline(c(0,1))
qvalue(pVals)$pi0
fitBumModel(pVals)$lambda
CBUM(pVals)[1]
pi0[j]
### Generate simulated data
### according to assumptions
## Set the seed for reproducible results
set.seed(555)
## Use the BioNet package from Bioc
library(BioNet)
library(pi0)
library(qvalue)
## Generate data according to the
## Chi-squared model from the paper
pi0 <- seq(0.05,0.95,by=0.05)
lambda <- c(4,9,16)
N <- 5000
nrep <- 10
cbum <- bum <- storey <- array(NA,dim=c(19,3,nrep))
for(i in 1:length(pi0)){
for(j in 1:length(lambda)){
for(k in 1:nrep){
Nnull <- floor(pi0[i]*N)
Nalt <- N - Nnull
pNull <- 1-pchisq(rchisq(Nnull,df=10),df=10)
pAlt <- 1-pchisq(rchisq(Nalt,df=10,ncp=lambda[j]),df=10)
pVals <- c(pAlt,pNull)
cbum[i,j,k] <- CBUM(pVals)[1]
bum[i,j,k] <- fitBumModel(pVals)$lambda
storey[i,j,k] <- qvalue(pVals)$pi0
}
print(c(i,j))
}
}
rm(list=ls())
### Generate simulated data
### according to assumptions
## Set the seed for reproducible results
set.seed(555)
## Use the BioNet package from Bioc
library(BioNet)
library(pi0)
library(qvalue)
## Generate data according to the
## Chi-squared model from the paper
pi0 <- seq(0.05,0.95,by=0.05)
lambda <- c(4,9,16)
N <- 5000
nrep <- 10
cbum <- bum <- storey <- array(NA,dim=c(19,3,nrep))
for(i in 1:length(pi0)){
for(j in 1:length(lambda)){
for(k in 1:nrep){
Nnull <- floor(pi0[i]*N)
Nalt <- N - Nnull
pNull <- 1-pchisq(rchisq(Nnull,df=10),df=10)
pAlt <- 1-pchisq(rchisq(Nalt,df=10,ncp=lambda[j]),df=10)
pVals <- c(pAlt,pNull)
cbum[i,j,k] <- CBUM(pVals)[1]
bum[i,j,k] <- fitBumModel(pVals,plot=FALSE)$lambda
storey[i,j,k] <- qvalue(pVals)$pi0
}
print(c(i,j))
}
}
par(mfrow=c(1,3))
plot(pi0,meanStorey[,1],xlab="pi0",
ylab="Storey Est.",col=1,type="l")
lines(pi0,meanStorey[,2],col=2)
lines(pi0,meanStorey[,3],col=3)
plot(pi0,meanBum[,1],xlab="pi0",
ylab="BUM Est.",col=1,type="l")
lines(pi0,meanBum[,2],col=2)
lines(pi0,meanBum[,3],col=3)
plot(pi0,meanCbum[,1],xlab="pi0",
ylab="CBUM Est.",col=1,type="l")
lines(pi0,meanCbum[,2],col=2)
lines(pi0,meanCbum[,3],col=3)
meanStorey <- apply(storey,c(1,2),mean)
meanBum <- apply(bum,c(1,2),mean)
meanCbum <- apply(cbum,c(1,2),mean)
par(mfrow=c(1,3))
par(mfrow=c(1,3))
plot(pi0,meanStorey[,1],xlab="pi0",
ylab="Storey Est.",col=1,type="l")
lines(pi0,meanStorey[,2],col=2)
lines(pi0,meanStorey[,3],col=3)
plot(pi0,meanBum[,1],xlab="pi0",
ylab="BUM Est.",col=1,type="l")
lines(pi0,meanBum[,2],col=2)
lines(pi0,meanBum[,3],col=3)
plot(pi0,meanCbum[,1],xlab="pi0",
ylab="CBUM Est.",col=1,type="l")
lines(pi0,meanCbum[,2],col=2)
lines(pi0,meanCbum[,3],col=3)
plot(pi0,meanStorey[,1],xlab="pi0",
ylab="Storey Est.",col=1,type="l")
lines(pi0,meanStorey[,2],col=2)
lines(pi0,meanStorey[,3],col=3)
plot(pi0,meanBum[,1],xlab="pi0",
ylab="BUM Est.",col=1,type="l")
lines(pi0,meanBum[,2],col=2)
lines(pi0,meanBum[,3],col=3)
plot(pi0,meanCbum[,1],xlab="pi0",
ylab="CBUM Est.",col=1,type="l")
lines(pi0,meanCbum[,2],col=2)
lines(pi0,meanCbum[,3],col=3)
abline(c(0,1))
par(mfrow=c(1,3))
plot(pi0,meanStorey[,1],xlab="pi0",
ylab="Storey Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanStorey[,2],col=2)
lines(pi0,meanStorey[,3],col=3)
abline(c(0,1),col="grey")
plot(pi0,meanBum[,1],xlab="pi0",
ylab="BUM Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanBum[,2],col=2)
lines(pi0,meanBum[,3],col=3)
abline(c(0,1),col="grey")
plot(pi0,meanCbum[,1],xlab="pi0",
ylab="CBUM Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanCbum[,2],col=2)
lines(pi0,meanCbum[,3],col=3)
abline(c(0,1),col="grey")
bumMod <- fitBumModel(pVals,plot=FALSE)
bumMod
bumMod$a
### Generate simulated data
### according to assumptions
## Set the seed for reproducible results
set.seed(555)
## Use the BioNet package from Bioc
library(BioNet)
library(pi0)
library(qvalue)
## Generate data according to the
## Chi-squared model from the paper
pi0 <- seq(0.05,0.95,by=0.05)
lambda <- c(4,9,16)
N <- 5000
nrep <- 10
cbum <- bum <- storey <- array(NA,dim=c(19,3,nrep))
for(i in 1:length(pi0)){
for(j in 1:length(lambda)){
for(k in 1:nrep){
Nnull <- floor(pi0[i]*N)
Nalt <- N - Nnull
pNull <- 1-pchisq(rchisq(Nnull,df=10),df=10)
pAlt <- 1-pchisq(rchisq(Nalt,df=10,ncp=lambda[j]),df=10)
pVals <- c(pAlt,pNull)
cbum[i,j,k] <- CBUM(pVals)[1]
bumMod <-  fitBumModel(pVals,plot=FALSE)
bum[i,j,k] <- bumMod$lambda + (1-bumMod$lambda)*bumMod$a
storey[i,j,k] <- qvalue(pVals)$pi0
}
print(c(i,j))
}
}
meanStorey <- apply(storey,c(1,2),mean)
meanBum <- apply(bum,c(1,2),mean)
meanCbum <- apply(cbum,c(1,2),mean)
par(mfrow=c(1,3))
plot(pi0,meanStorey[,1],xlab="pi0",
ylab="Storey Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanStorey[,2],col=2)
lines(pi0,meanStorey[,3],col=3)
abline(c(0,1),col="grey")
plot(pi0,meanBum[,1],xlab="pi0",
ylab="BUM Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanBum[,2],col=2)
lines(pi0,meanBum[,3],col=3)
abline(c(0,1),col="grey")
plot(pi0,meanCbum[,1],xlab="pi0",
ylab="CBUM Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanCbum[,2],col=2)
lines(pi0,meanCbum[,3],col=3)
abline(c(0,1),col="grey")
bum[i,j,k] <- bumMod$lambda + (1-bumMod$lambda)*bumMod$a
source('~/Desktop/pi0.R')
meanStorey <- apply(storey,c(1,2),mean)
meanBum <- apply(bum,c(1,2),mean)
meanCbum <- apply(cbum,c(1,2),mean)
par(mfrow=c(1,3))
plot(pi0,meanStorey[,1],xlab="pi0",
ylab="Storey Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanStorey[,2],col=2)
lines(pi0,meanStorey[,3],col=3)
abline(c(0,1),col="grey")
plot(pi0,meanBum[,1],xlab="pi0",
ylab="BUM Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanBum[,2],col=2)
lines(pi0,meanBum[,3],col=3)
abline(c(0,1),col="grey")
plot(pi0,meanCbum[,1],xlab="pi0",
ylab="CBUM Est.",col=1,type="l",xlim=c(0,1),ylim=c(0,1))
lines(pi0,meanCbum[,2],col=2)
lines(pi0,meanCbum[,3],col=3)
abline(c(0,1),col="grey")
?CBUM
xx <- vector(NA,mode="list",length=10)
?vect
?vector
xx <- vector(mode="list",length=10)
xx
xx <- xx + 1
xx
library(IRanges)
?Rle
ll <- vector(mode="list",length=20)
for(i in 1:20){ll[[i]]<- Rle(rbinom(1e7,size=3,prob=0.05))}
system.time(Reduce(ll,"+"))
system.time(Reduce("+",ll))
?DataFrame
?as.DataFrame
?
DF <- DataFrame(ll)
DF <- DataFrame(ll)
Df
DF
dim(DF)
system.time(Reduce("+",ll))
ll2 <- as.list(DF)
class(DF)
class(ll2)
?Qr
mod <- cbind(repmod <- model.matrix(~ rep(c(0,1),each=10))
mod0 <- cbind(mod[,1])
)
mod <- model.matrix(~ rep(c(0,1),each=10))
mod0 <- cbind(mod[,1])
h1 <- solve(t(mod) %*% mod) %*% mod
h1 <- solve(t(mod) %*% mod) %*% t(mod)
dim(h1)
h1 <- mod %*% solve(t(mod) %*% mod) %*% t(mod)
h1
dim(h1)
h1 <- t(mod) %*% solve(mod %*% t(mod)) %*% mod
solve(t(mod) %*% mod)
t(mod) %*% solve(t(mod) %*% mod)
mod%*% solve(t(mod) %*% mod)
mod %*% solve(t(mod) %*% mod)
dim(mod %*% solve(t(mod) %*% mod))
dim(mod %*% solve(t(mod) %*% mod) %*% t(mod))
h1 <- mod %*% solve(t(mod) %*% mod) %*% t(mod)
h1
y <- rnorm(20)
h1 %*5 y
h1 %*% y
object.size(DF)
?object.size
object.size(DF,units="Gb")
aa <- object.size(DF)
print(aa,units="Gb")
aa <- object.size(ll)
print(aa,units="Gb")
library(Matrix)
?sparseMatrix
bb <- rbinom(1e7,size=1,prob=0.5)
object.size(bb)
object.size(as.vector(ll[[1]]))
cbind(ll)
df2 <- as.matrix(DF)
object.size(df)
object.size(df2)
df2[1,]
df2 <- as.data.frame(DF)
object.size(df2)
mm <- Matrix(as.matrix(df2))
object.size(mm)
object.size(ll)
object.size(ll)/object.size(mm)
dim(h1)
tmp <- solve(h1,mm)
tmp
aa <- solve(mod,mm)
dim(mod)
aa <- solve(t(mod),mm)
dim(mm)
mm[1,]
class(mm)
tmp <- mm %*% h1
class(tmp)
object.size(tmp)
object.size(tmp)/object.size(mm)
print(object.size(tmp),units="gb")
print(object.size(tmp),units="Gb")
tmp[1,]
mm[1,]
mean(mm[1,1:10])
mean(mm[1,21:30])
mean(mm[1,11:20])
tmp[2,]
mean(mm[1,1:10])
tmp[3,]
mean(mm[3,1:10])
mm <- Matrix(as.matrix(df2))
rowSums(mm)
aa <- rowSums(mm)
class(aa)
length(aa)
dat <- mm
dim(dat)
rm(mm)
ls()
rm(aa,bb,DF,df2,h1,i,ll,ll2,tmp,xx,)
rm(aa,bb,DF,df2,h1,i,ll,ll2,tmp,xx,y)
rm(aa)
rm(bb)
ls()
class(dat)
n <- dim(dat)[2]
m <- dim(dat)[1]
if(is.null(mod0)){
mod0 <- cbind(rep(1,n))
}
df1 <- dim(mod)[2]
df0 <- dim(mod0)[2]
p <- rep(0,m)
Id <- diag(n)
resid <- dat %*% (Id - mod %*% solve(t(mod) %*% mod) %*% t(mod))
rss1 <- rowSums(resid*resid)
rm(resid)
gc()
7 * 20
resid0 <- dat %*% (Id - mod0 %*% solve(t(mod0) %*% mod0) %*% t(mod0))
rss0 <- rowSums(resid0*resid0)
rm(resid0)
gc()
rss0[1,]
length(rss0)
fstats <- ((rss0 - rss1)/(df1-df0))/(rss1/(n-df1))
fstats[1]
gc()
fstats <- function(dat,mod,mod0=NULL){
n <- dim(dat)[2]
m <- dim(dat)[1]
if(is.null(mod0)){
mod0 <- cbind(rep(1,n))
}
df1 <- dim(mod)[2]
df0 <- dim(mod0)[2]
p <- rep(0,m)
Id <- diag(n)
resid <- dat %*% (Id - mod %*% solve(t(mod) %*% mod) %*% t(mod))
rss1 <- rowSums(resid*resid)
rm(resid)
gc()
resid0 <- dat %*% (Id - mod0 %*% solve(t(mod0) %*% mod0) %*% t(mod0))
rss0 <- rowSums(resid0*resid0)
rm(resid0)
gc()
fstats <- ((rss0 - rss1)/(df1-df0))/(rss1/(n-df1))
rm(rss0,rss1)
gc()
return(fstats)
}
ls()
rm(fstats)
rm(Id)
rm(df0)
rm(df1)
rm(rss0)
rm(rss1)
ls()
rm(n)
rm(p)
rm(m)
gc()
mem_change <- function(code) {
start <- mem()
expr <- substitute(code)
eval(expr, parent.frame())
rm(code, expr)
round(mem() - start, 3)
}
mem_change(fstats(dat,mod,md0))
mem_change(fstats(dat,mod,mod0))
mem <- function() {
bit <- 8L * .Machine$sizeof.pointer
if (!(bit == 32L || bit == 64L)) {
stop("Unknown architecture", call. = FALSE)
}
node_size <- if (bit == 32L) 28L else 56L
usage <- gc()
sum(usage[, 1] * c(node_size, 8)) / (1024 ^ 2)
}
mem()
mem <- function() {
bit <- 8L * .Machine$sizeof.pointer
if (!(bit == 32L || bit == 64L)) {
stop("Unknown architecture", call. = FALSE)
}
node_size <- if (bit == 32L) 28L else 56L
usage <- gc()
sum(usage[, 1] * c(node_size, 8)) / (1024 ^ 2)
}
mem_change(fstats(dat,mod,mod0))
source('~/Dropbox/Jeff/code/github/2013/tspreg/R/fstats.R')
source('~/Dropbox/Jeff/code/github/2013/tspreg/R/fstats.R')
mem_change(fstats(dat,mod,mod0))
source("http://biostat.jhsph.edu/~jleek/code/twitterMap.R")
twitterMap
args(twitterMap)
twitterMap("IrvingChamber",userLocation="Missouri")
library(twitteR)
?twitteR
getUser
twInterfaceObj
library(httr)
GET("http://www.fitbit.com/login")
tmp <- GET("http://www.fitbit.com/login")
tmp
class(tmp)
tmp <- GET("http://www.fitbit.com/login")
tmp
getwd()
setwd("~/Dropbox/Jeff/teaching/2013/modules/03_ObtainingData/")
setwd("001obtainingDatamotivation/")
slidify('index.Rmd')
library(slidify)
slidify('index.Rmd')
browseURL("index.html")
slidify('index.Rmd')
slidify('index.Rmd')
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("../002rawVsProcessedData/")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
getwd()
setwd("..")
setwd("002rawAndProcessedData/")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
setwd("../003componentsOfTidyData/")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
setwd("../004readingLocalFiles/")
slidify("index.Rmd")
setwd("../004readingLocalFiles/")
browseURL("index.html")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
install.packages("RMongo")
library(makeslides)
sf()
sf()
setwd("../03_03_creatingNewVariables/")
sf()
sf()
setwd("../03_02_summarizingData/")
sf()
setwd("../04_02_regularExpressions/")
sf()
bu()
sf()
setwd("../02_05_readingFromOtherSources/")
sf()
sf()
library(rhdf5)
h5ls("~/Downloads/getdata-data-h5ex_d_extern.h5")
h5ls("~/Downloads/ex_d_extern.h5")
h5ls("~/Downloads/getdata-data-h5ex_d_extern.h5")
tmp = h5read("~/Downloads/getdata-data-h5ex_d_extern.h5")
tmp = h5read("~/Downloads/getdata-data-h5ex_d_extern.h5","df")
h5ls("~/Downloads/getdata-data-h5ex_d_extern.h5")
setwd("../01_09_dataTable/")
ls(0)
sf()
slidify2 <- function(inputFile){
knit(inputFile)
slidify(inputFile, knit_deck = TRUE)
}
slidify2("index.Rmd")
bu()
slidify2("index.Rmd")
slidify2("index.Rmd")
bu()
slidify2("index.Rmd")
